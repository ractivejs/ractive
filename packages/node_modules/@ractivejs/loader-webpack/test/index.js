/* eslint-env node, qunit */
import { readFileSync } from 'fs'
import loader from '@ractivejs/loader-webpack'

QUnit.module('loader-webpack')

// The loader effectivelly just a wrapper around toParts and toCJS.

const specs = [
  'reference',
  'reordered',
  'script-only',
  'style-only',
  'template-only',
  'links-only',
  'duplicate-link-href',
  'duplicate-link-name',
  'empty-top-levels',
  'script-with-mustache',
  'style-with-mustache',
  'duplicate-require',
  'non-dependency-requires'
]

specs.forEach(spec => {
  QUnit.test(spec, assert => {
    let actualCode, actualMap

    const source = readFileSync(`test/samples/${spec}/component.ractive.html`, { encoding: 'utf8' })
    const expectedCode = readFileSync(`test/samples/${spec}/component.js`, { encoding: 'utf8' })
    const expectedMap = JSON.parse(readFileSync(`test/samples/${spec}/component.js.map`, { encoding: 'utf8' }))

    const resourcePath = `component.ractive.html`
    const callback = (e, code, map) => { actualCode = code; actualMap = map }

    loader.call({ resourcePath, callback }, source)

    assert.strictEqual(actualCode, expectedCode)
    assert.deepEqual(actualMap, expectedMap)
  })
})
