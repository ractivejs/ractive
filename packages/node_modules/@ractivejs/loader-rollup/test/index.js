/* eslint-env node, qunit */
import { readFileSync } from 'fs'
import loader from '@ractivejs/loader-rollup'

QUnit.module('loader-rollup')

// The loader effectivelly just a wrapper around toParts and toCJS.

const specs = [
  'reference',
  'reordered',
  'script-only',
  'style-only',
  'template-only',
  'links-only',
  'duplicate-link-href',
  'duplicate-link-name',
  'empty-top-levels',
  'script-with-mustache',
  'style-with-mustache',
  'duplicate-require',
  'non-dependency-requires'
]

specs.forEach(spec => {
  QUnit.test(spec, assert => {
    const loaderInstance = loader()

    const id = `component.ractive.html`
    const source = readFileSync(`test/samples/${spec}/component.ractive.html`, { encoding: 'utf8' })
    const expectedCode = readFileSync(`test/samples/${spec}/component.js`, { encoding: 'utf8' })
    const expectedMap = JSON.parse(readFileSync(`test/samples/${spec}/component.js.map`, { encoding: 'utf8' }))

    const { code, map } = loaderInstance.transform(source, id)

    assert.strictEqual(code, expectedCode)
    assert.deepEqual(map, expectedMap)
  })
})

QUnit.test('return loader name', assert => {
  assert.strictEqual(loader().name, '@ractivejs/loader-rollup')
})

QUnit.test('return null on non-component extension', assert => {
  assert.strictEqual(loader().transform('foo', 'path/to/MyComponent.hbs'), null)
  assert.strictEqual(loader().transform('foo', 'path/to/MyComponent.ractive.hbs'), null)
})

QUnit.test('return null on commonjs proxy modules', assert => {
  assert.strictEqual(loader().transform('foo', 'commonjs-proxy:path/to/MyComponent.html'), null)
  assert.strictEqual(loader().transform('foo', 'commonjs-proxy:path/to/MyComponent.ractive.html'), null)
})
