/* eslint-env browser, qunit */
import { getComponentName, getComponentPath, isComponentPath, replaceExtension, isComponentName, getRequiredModules } from '@ractivejs/utils-component'

QUnit.module('utils')

QUnit.test(`getComponentName`, assert => {
  const specs = [
    { input: 'MyComponent', expected: 'MyComponent' },
    { input: 'MyComponent.html', expected: 'MyComponent' },
    { input: 'MyComponent.ractive.html', expected: 'MyComponent' },
    { input: 'path/to/MyComponent', expected: 'MyComponent' },
    { input: 'path/to/MyComponent.html', expected: 'MyComponent' },
    { input: 'path/to/MyComponent.ractive.html', expected: 'MyComponent' },
    { input: '/path/to/MyComponent', expected: 'MyComponent' },
    { input: '/path/to/MyComponent.html', expected: 'MyComponent' },
    { input: '/path/to/MyComponent.ractive.html', expected: 'MyComponent' },
    { input: './path/to/MyComponent', expected: 'MyComponent' },
    { input: './path/to/MyComponent.html', expected: 'MyComponent' },
    { input: './path/to/MyComponent.ractive.html', expected: 'MyComponent' },
    { input: '../path/to/MyComponent', expected: 'MyComponent' },
    { input: '../path/to/MyComponent.html', expected: 'MyComponent' },
    { input: '../path/to/MyComponent.ractive.html', expected: 'MyComponent' }
  ]

  specs.forEach(({ input, expected }) => {
    assert.strictEqual(getComponentName(input), expected)
  })
})

QUnit.test(`getComponentPath valid`, assert => {
  const specs = [
    // Returns path if base is missing
    { base: '', path: 'MyComponent.ractive.html', expected: 'MyComponent.ractive.html' },
    { base: '', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: '', path: './MyComponent.ractive.html', expected: './MyComponent.ractive.html' },
    { base: '', path: '../MyComponent.ractive.html', expected: '../MyComponent.ractive.html' },
    { base: '', path: 'path/to/MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    { base: '', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '', path: './path/to/MyComponent.ractive.html', expected: './path/to/MyComponent.ractive.html' },
    { base: '', path: '../path/to/MyComponent.ractive.html', expected: '../path/to/MyComponent.ractive.html' },

    // Returns path if supplied with file name
    { base: 'MyOtherComponent.ractive.html', path: 'MyComponent.ractive.html', expected: 'MyComponent.ractive.html' },
    { base: 'MyOtherComponent.ractive.html', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: 'MyOtherComponent.ractive.html', path: './MyComponent.ractive.html', expected: 'MyComponent.ractive.html' },
    // { base: 'MyOtherComponent.ractive.html', path: '../MyComponent.ractive.html', expected: 'SHOULD BLOW UP' },
    { base: 'MyOtherComponent.ractive.html', path: 'path/to/MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    { base: 'MyOtherComponent.ractive.html', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: 'MyOtherComponent.ractive.html', path: './path/to/MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    // { base: 'MyOtherComponent.ractive.html', path: '../path/to/MyComponent.ractive.html', expected: 'SHOULD BLOW UP' },

    // Relative to domain
    { base: '/', path: 'MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: '/', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: '/', path: './MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    // { base: '/', path: '../MyComponent.ractive.html', expected: 'SHOULD BLOW UP' },
    { base: '/', path: 'path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/', path: './path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    // { base: '/', path: '../path/to/MyComponent.ractive.html', expected: 'SHOULD BLOW UP' },

    // Relative to single-segment path (ensure it doesn't pop off the only segment)
    { base: 'path/', path: 'MyComponent.ractive.html', expected: 'path/MyComponent.ractive.html' },
    { base: 'path/', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: 'path/', path: './MyComponent.ractive.html', expected: 'path/MyComponent.ractive.html' },
    { base: 'path/', path: '../MyComponent.ractive.html', expected: 'MyComponent.ractive.html' },
    { base: 'path/', path: 'path/to/MyComponent.ractive.html', expected: 'path/path/to/MyComponent.ractive.html' },
    { base: 'path/', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: 'path/', path: './path/to/MyComponent.ractive.html', expected: 'path/path/to/MyComponent.ractive.html' },
    { base: 'path/', path: '../path/to/MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },

    // Deep paths
    { base: 'path/to/', path: 'MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    { base: 'path/to/', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: 'path/to/', path: './MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    { base: 'path/to/', path: '../MyComponent.ractive.html', expected: 'path/MyComponent.ractive.html' },
    { base: 'path/to/', path: 'path/to/MyComponent.ractive.html', expected: 'path/to/path/to/MyComponent.ractive.html' },
    { base: 'path/to/', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: 'path/to/', path: './path/to/MyComponent.ractive.html', expected: 'path/to/path/to/MyComponent.ractive.html' },
    { base: 'path/to/', path: '../path/to/MyComponent.ractive.html', expected: 'path/path/to/MyComponent.ractive.html' },

    // Paths with component file name
    { base: 'path/to/MyOtherComponent.ractive.html', path: 'MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: './MyComponent.ractive.html', expected: 'path/to/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: '../MyComponent.ractive.html', expected: 'path/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: 'path/to/MyComponent.ractive.html', expected: 'path/to/path/to/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: './path/to/MyComponent.ractive.html', expected: 'path/to/path/to/MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: '../path/to/MyComponent.ractive.html', expected: 'path/path/to/MyComponent.ractive.html' },

    // Deep paths relative to domain
    { base: '/path/to/', path: 'MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/path/to/', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: '/path/to/', path: './MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/path/to/', path: '../MyComponent.ractive.html', expected: '/path/MyComponent.ractive.html' },
    { base: '/path/to/', path: 'path/to/MyComponent.ractive.html', expected: '/path/to/path/to/MyComponent.ractive.html' },
    { base: '/path/to/', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/path/to/', path: './path/to/MyComponent.ractive.html', expected: '/path/to/path/to/MyComponent.ractive.html' },
    { base: '/path/to/', path: '../path/to/MyComponent.ractive.html', expected: '/path/path/to/MyComponent.ractive.html' },

    // Paths relative to domain with component file name
    { base: '/path/to/MyOtherComponent.ractive.html', path: 'MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: '/MyComponent.ractive.html', expected: '/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: './MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: '../MyComponent.ractive.html', expected: '/path/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: 'path/to/MyComponent.ractive.html', expected: '/path/to/path/to/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: '/path/to/MyComponent.ractive.html', expected: '/path/to/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: './path/to/MyComponent.ractive.html', expected: '/path/to/path/to/MyComponent.ractive.html' },
    { base: '/path/to/MyOtherComponent.ractive.html', path: '../path/to/MyComponent.ractive.html', expected: '/path/path/to/MyComponent.ractive.html' }

  ]

  specs.forEach(({ base, path, expected }, index) => {
    assert.strictEqual(getComponentPath(path, base), expected)
  })
})

QUnit.test('getComponentPath invalid', assert => {
  const specs = [
    { base: 'path/', path: '../../MyComponent.ractive.html' },
    { base: 'path/to/', path: '../../../MyComponent.ractive.html' },
    { base: '/', path: '../MyComponent.ractive.html' },
    { base: '/path/', path: '../../MyComponent.ractive.html' },
    { base: '/path/to', path: '../../../MyComponent.ractive.html' },
    { base: 'MyOtherComponent.ractive.html', path: '../MyComponent.ractive.html' },
    { base: 'path/MyOtherComponent.ractive.html', path: '../../MyComponent.ractive.html' },
    { base: 'path/to/MyOtherComponent.ractive.html', path: '../../../MyComponent.ractive.html' }
  ]

  specs.forEach(({ base, path }) => {
    assert.throws(() => { getComponentPath(path, base) }, Error)
  })
})

QUnit.test('isComponentPath', assert => {
  const specs = [
    'MyComponent.html',
    'MyComponent.ractive.html',
    'path/to/MyComponent.html',
    'path/to/MyComponent.ractive.html',
    '/path/to/MyComponent.html',
    '/path/to/MyComponent.ractive.html',
    './path/to/MyComponent.html',
    './path/to/MyComponent.ractive.html',
    '../path/to/MyComponent.html',
    '../path/to/MyComponent.ractive.html'
  ]

  specs.forEach(spec => {
    assert.ok(isComponentPath(spec))
  })
})

QUnit.test('isComponentName', assert => {
  const specs = [
    'MYCOMPONENT',
    'mycomponent',
    'MyComponent',
    'myComponent',
    'my-component',
    'myComponent-',
    'mycomponent0',
    '_myComponent',
    'my_component',
    'myComponent_',
    '$myComponent',
    'my$component',
    'myComponent$'
  ]

  specs.forEach(spec => {
    assert.ok(isComponentName(spec))
  })
})

QUnit.test('replaceExtension', assert => {
  const specs = [
    { path: 'MyComponent.html', ext: '.js', expected: 'MyComponent.js' },
    { path: '/MyComponent.html', ext: '.js', expected: '/MyComponent.js' },
    { path: './MyComponent.html', ext: '.js', expected: './MyComponent.js' },
    { path: '../MyComponent.html', ext: '.js', expected: '../MyComponent.js' },
    { path: 'path/to/MyComponent.html', ext: '.js', expected: 'path/to/MyComponent.js' },
    { path: '/path/to/MyComponent.html', ext: '.js', expected: '/path/to/MyComponent.js' },
    { path: './path/to/MyComponent.html', ext: '.js', expected: './path/to/MyComponent.js' },
    { path: '../path/to/MyComponent.html', ext: '.js', expected: '../path/to/MyComponent.js' },
    { path: 'MyComponent.ractive.html', ext: '.js', expected: 'MyComponent.js' },
    { path: '/MyComponent.ractive.html', ext: '.js', expected: '/MyComponent.js' },
    { path: './MyComponent.ractive.html', ext: '.js', expected: './MyComponent.js' },
    { path: '../MyComponent.ractive.html', ext: '.js', expected: '../MyComponent.js' },
    { path: 'path/to/MyComponent.ractive.html', ext: '.js', expected: 'path/to/MyComponent.js' },
    { path: '/path/to/MyComponent.ractive.html', ext: '.js', expected: '/path/to/MyComponent.js' },
    { path: './path/to/MyComponent.ractive.html', ext: '.js', expected: './path/to/MyComponent.js' },
    { path: '../path/to/MyComponent.ractive.html', ext: '.js', expected: '../path/to/MyComponent.js' }
  ]

  specs.forEach(({ path, ext, expected }, index) => {
    assert.strictEqual(replaceExtension(path, ext), expected)
  })
})

QUnit.test('getRequiredModules', assert => {
  // Edge-cases not covered:
  // const foo13 = foo11.require('foo13')
  // const foo14 = foo11.require("foo14")

  const sample = `
    require('a')
    require( 'b' )
    const foo=require('c')
    const bar = require('d')

    require("e")
    require( "f" )
    const foo=require("g")
    const bar = require("h")

    function require(foo00){}

    /*
    * const foo01 = require('foo01')
    * const foo02 = require("foo02")
    */

    // const foo03 = require('foo03')
    // const foo04 = require("foo04")

    const foo05 = /require('foo05')/
    const foo06 = /require("foo06")/

    const foo07 = 'require(\\'foo07\\')'
    const foo08 = 'require("foo08")'

    const foo09 = "require('foo09')"
    const foo10 = "require(\\"foo10\\")"

    const foo11 = { require(foo11){} }
    const foo12 = function require(foo12){}
  `

  assert.deepEqual(getRequiredModules(sample), [
    { name: 'a', module: 'a' },
    { name: 'b', module: 'b' },
    { name: 'c', module: 'c' },
    { name: 'd', module: 'd' },
    { name: 'e', module: 'e' },
    { name: 'f', module: 'f' },
    { name: 'g', module: 'g' },
    { name: 'h', module: 'h' }
  ])
})
