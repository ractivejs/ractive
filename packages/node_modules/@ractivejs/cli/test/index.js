/* eslint-env node, qunit */
import { resolve, sep } from 'path'
import { readFileSync } from 'fs'
import { listSync } from 'fs-plus'
import { execSync } from 'child_process'

QUnit.module('cli construction')

const binPath = resolve('./bin')
const constructionSamples = resolve('./test/samples-construction')
const parseSamples = resolve('./test/samples-parse')
const scaffoldSamples = resolve('./test/samples-scaffold')
const readOpts = { encoding: 'utf8' }
const command = cmd => `node ${binPath}${sep}${cmd}`

listSync(constructionSamples).forEach(p => {
  QUnit.test(p.split(sep).pop(), assert => {
    const component = readFileSync(resolve(p, 'component.ractive.html'), readOpts)
    const expectedParts = readFileSync(resolve(p, 'component.parts.json'), readOpts)
    const expectedModule = readFileSync(resolve(p, 'component.js'), readOpts)
    const expectedMap = readFileSync(resolve(p, 'component.js.map'), readOpts)

    const actualParts = execSync(command('ractive parts'), { encoding: 'utf8', input: component })
    const actualModule = execSync(command('ractive module'), { encoding: 'utf8', input: actualParts })
    const actualMap = execSync(command('ractive sourcemap -s "component.ractive.html" -f "component.js"'), { encoding: 'utf8', input: actualParts })

    assert.deepEqual(JSON.parse(actualParts), JSON.parse(expectedParts))
    assert.strictEqual(actualModule, expectedModule)
    assert.deepEqual(JSON.parse(actualMap), JSON.parse(expectedMap))
  })
})

QUnit.module('cli parse')

listSync(parseSamples).forEach(p => {
  QUnit.test(p.split(sep).pop(), assert => {
    const cmd = readFileSync(resolve(p, 'command.sh'), readOpts)
    const template = readFileSync(resolve(p, 'template.ractive.html'), readOpts)
    const expected = readFileSync(resolve(p, 'output'), readOpts)
    const actual = execSync(command(cmd), { encoding: 'utf8', input: template })
    assert.strictEqual(actual, expected)
  })
})

QUnit.module('cli scaffold')

listSync(scaffoldSamples).forEach(p => {
  QUnit.test(p.split(sep).pop(), assert => {
    const cmd = readFileSync(resolve(p, 'command.sh'), readOpts)
    const expected = readFileSync(resolve(p, 'output'), readOpts)
    const actual = execSync(command(cmd), { encoding: 'utf8' })
    assert.strictEqual(actual, expected)
  })
})
