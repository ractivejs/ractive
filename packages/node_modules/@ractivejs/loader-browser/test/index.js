/* eslint-env browser, qunit */
import { load } from '@ractivejs/loader-browser'

QUnit.module('loader-browser')

QUnit.test('relative to caller', assert => {
  return load('base/test/samples/relative-caller/component.ractive.html', { map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('relative to base', assert => {
  return load('component.ractive.html', { basePath: '/base/test/samples/relative-base/', map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('relative to component', assert => {
  return load('./base/test/samples/relative-component/component.ractive.html', { map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('relative to component, no options', assert => {
  return load('./base/test/samples/relative-component-no-options/component.ractive.html').then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: undefined })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: </div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('relative to component, with base', assert => {
  return load('./component.ractive.html', { basePath: '/base/test/samples/relative-component-with-base/', map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('relative to root', assert => {
  return load('/base/test/samples/relative-root/component.ractive.html', { map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('relative to root, with base', assert => {
  return load('/base/test/samples/relative-root-with-base/component.ractive.html', { basePath: '/foo/bar/baz/', map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('multi-link', assert => {
  return load('./base/test/samples/multi-link/component.ractive.html', { map: { answer: 42 } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42 })
    assert.deepEqual(Component.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }, ' ', { 't': 7, 'e': 'MyOtherComponent' }, ' ', { 't': 7, 'e': 'YetAnotherComponent' }] })

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })

    assert.ok(Component.components.hasOwnProperty('MyOtherComponent'))
    assert.strictEqual(typeof Component.components.MyOtherComponent, 'function')
    assert.strictEqual(typeof Component.components.MyOtherComponent.extend, 'function')
    assert.deepEqual(Component.components.MyOtherComponent.defaults.data, {})
    assert.deepEqual(Component.components.MyOtherComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-other-component', 't': 13 }], 'f': ['My Other Component'] }] })

    assert.ok(Component.components.hasOwnProperty('YetAnotherComponent'))
    assert.strictEqual(typeof Component.components.YetAnotherComponent, 'function')
    assert.strictEqual(typeof Component.components.YetAnotherComponent.extend, 'function')
    assert.deepEqual(Component.components.YetAnotherComponent.defaults.data, {})
    assert.deepEqual(Component.components.YetAnotherComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'yet-another-component', 't': 13 }], 'f': ['Yet Another Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const cssId = Component.defaults.cssId
    const html = `<div data-ractive-css="{${cssId}}">Hello, World!</div> <div data-ractive-css="{${cssId}}">Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component" data-ractive-css="{${cssId}}">My Component</div> <div data-ractive-css="{${cssId}}" class='my-other-component'>My Other Component</div> <div class="yet-another-component" data-ractive-css="{${cssId}}">Yet Another Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('duplicate require', assert => {
  return load('./base/test/samples/relative-component/component.ractive.html', { map: { shared: {} } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')
    assert.ok(Component.defaults.data.shared1 === Component.defaults.data.shared2)
  })
})

QUnit.test('duplicate link href', assert => {
  return load('./base/test/samples/duplicate-link-href/component.ractive.html', { map: { shared: {} } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')

    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')

    // Ensure all 3 point to the same constructor
    assert.ok(Component.components.MyComponent === Component.components.MyOtherComponent)
    assert.ok(Component.components.MyOtherComponent === Component.components.YetAnotherComponent)
    assert.ok(Component.components.YetAnotherComponent === Component.components.MyComponent)
  })
})

QUnit.test('duplicate link name', assert => {
  return load('./base/test/samples/duplicate-link-name/component.ractive.html', { map: { shared: {} } }).then(Component => {
    assert.strictEqual(typeof Component, 'function')
    assert.strictEqual(typeof Component.extend, 'function')

    // The loader will not try to be clever. It will just overwrite the
    // registration with the latest linked component.
    assert.ok(Component.components.hasOwnProperty('MyComponent'))
    assert.strictEqual(typeof Component.components.MyComponent, 'function')
    assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
    assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'yet-another-component', 't': 13 }], 'f': ['Yet Another Component'] }] })

    const instance = Component({ el: '#qunit-fixture' })
    const html = `<div class="yet-another-component">Yet Another Component</div>`

    assert.htmlEqual(instance.toHTML(), html)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, html)
  })
})

QUnit.test('multi-load', assert => {
  const basePath = '/base/test/samples/multi-load/'
  const map = { answer: 42, shared: {} }
  const promises = Promise.all(['component1.ractive.html', 'component2.ractive.html'].map(c => load(c, { basePath, map })))

  return promises.then(components => {
    components.forEach(Component => {
      assert.strictEqual(typeof Component, 'function')
      assert.strictEqual(typeof Component.extend, 'function')
      assert.deepEqual(Component.defaults.data, { message: 'World', answer: 42, shared: {} })

      assert.ok(Component.components.hasOwnProperty('MyComponent'))
      assert.strictEqual(typeof Component.components.MyComponent, 'function')
      assert.strictEqual(typeof Component.components.MyComponent.extend, 'function')
      assert.deepEqual(Component.components.MyComponent.defaults.data, {})
      assert.deepEqual(Component.components.MyComponent.defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'my-component', 't': 13 }], 'f': ['My Component'] }] })
    })

    assert.deepEqual(components[0].defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'component-1', 't': 13 }], 'f': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] }] })

    assert.deepEqual(components[1].defaults.template, { 'v': 4, 't': [{ 't': 7, 'e': 'div', 'm': [{ 'n': 'class', 'f': 'component-2', 't': 13 }], 'f': [{ 't': 7, 'e': 'div', 'f': ['Hello, ', { 't': 2, 'r': 'message' }, '!'] }, ' ', { 't': 7, 'e': 'div', 'f': ['Answer to the Ultimate Question of Life, the Universe, and Everything: ', { 't': 2, 'r': 'answer' }] }, ' ', { 't': 7, 'e': 'MyComponent' }] }] })

    const html = (n, cssId) => `<div class="component-${n}" data-ractive-css="{${cssId}}"><div>Hello, World!</div> <div>Answer to the Ultimate Question of Life, the Universe, and Everything: 42</div> <div class="my-component">My Component</div></div>`

    const instance1 = components[0]({ el: '#qunit-fixture', append: true })
    const cssId1 = components[0].defaults.cssId
    const html1 = html(1, cssId1)

    const instance2 = components[1]({ el: '#qunit-fixture', append: true })
    const cssId2 = components[1].defaults.cssId
    const html2 = html(2, cssId2)

    assert.htmlEqual(instance1.toHTML(), html1)
    assert.htmlEqual(instance2.toHTML(), html2)
    assert.htmlEqual(document.getElementById('qunit-fixture').innerHTML, `${html1}${html2}`)

    // Ensure the dependencies are only ever evaluated once
    assert.ok(components[0].defaults.data.answer === components[1].defaults.data.answer)
    assert.ok(components[0].defaults.data.shared === components[1].defaults.data.shared)
    assert.ok(components[0].components.MyComponent === components[1].components.MyComponent)
  })
})
