/* eslint-env browser, qunit */
import { toParts, toConstructor, getComponentPath, isComponentPath, replaceExtension } from '@ractivejs/utils-component'

const defaults = { basePath: '', map: {} }
const promises = {}
const constructors = {}
const prefixes = ['/', './', '../']

const get = url => new Promise((resolve, reject) => {
  const xhr = new XMLHttpRequest()
  xhr.onload = () => resolve(xhr.responseText)
  xhr.onerror = reject
  xhr.open('GET', url)
  xhr.send()
})

// no prefix, no base       - Relative to page.
// no prefix, base provided - Relative to base.
// /                        - Relative to root.
// ./, ../                  - Relative to dependent.
const resolvePath = (dependency, dependent, base) => {
  const isRelative = prefixes.indexOf(dependency.slice(0, dependency.indexOf('/') + 1)) !== -1
  return getComponentPath(dependency, isRelative ? dependent : base)
}

const loadComponent = (base, dependent, dependency, map) => {
  const resolvedPath = resolvePath(dependency, dependent, base)
  const resolver = module => (isComponentPath(module) && constructors[resolvePath(module, resolvedPath, base)]) || map[module] || window[module]
  const loadComponents = components => components.map(d => loadComponent(base, resolvedPath, d.module, map))

  return promises[resolvedPath] || (promises[resolvedPath] = get(resolvedPath).then(content => {
    const parts = toParts(content)
    return Promise.all(loadComponents(parts.components)).then(() => {
      const source = resolvedPath
      const file = replaceExtension(resolvedPath, '.js')
      return (constructors[resolvedPath] = toConstructor({ source, file, parts, resolver }))
    })
  }))
}

export const load = (path, userOptions) => {
  const options = Object.assign({}, defaults, userOptions)
  return loadComponent(options.basePath, options.basePath, path, options.map)
}
