/* eslint-env node */
import { readFileSync } from 'fs'
import { toParts, toConstructor, getComponentPath, isComponentPath, replaceExtension } from '@ractivejs/utils-component'

const defaults = { basePath: '', map: {} }
const contents = {}
const constructors = {}
const prefixes = ['/', './', '../']

// no prefix, no base       - Relative to node_modules.
// no prefix, base provided - Relative to base.
// /                        - Relative to root.
// ./, ../                  - Relative to dependent.
const resolvePath = (dependency, dependent, base) => {
  const isRelative = prefixes.indexOf(dependency.slice(0, dependency.indexOf('/') + 1)) !== -1
  return getComponentPath(dependency, isRelative ? dependent : base)
}

const loadComponent = (base, dependent, dependency, map) => {
  const resolvedPath = resolvePath(dependency, dependent, base)
  const resolver = module => (isComponentPath(module) && constructors[resolvePath(module, resolvedPath, base)]) || map[module] || require(module)
  const content = contents[resolvedPath] || (contents[resolvedPath] = readFileSync(resolvedPath, { encoding: 'utf8' }))
  const parts = toParts(content)

  parts.components.forEach(c => { loadComponent(base, resolvedPath, c.module, map) })

  const source = resolvedPath
  const file = replaceExtension(resolvedPath, '.js')
  return constructors[resolvedPath] || (constructors[resolvedPath] = toConstructor({ source, file, parts, resolver }))
}

export const load = (path, userOptions) => {
  const options = Object.assign({}, defaults, userOptions)
  return Promise.resolve(loadComponent(options.basePath, options.basePath, path, options.map))
}
